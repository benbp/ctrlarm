// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cluster

import (
	network2 "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2018-11-01/network"
	"github.com/go-logr/logr"
	"github.com/juan-lee/ctrlarm/pkg/reconciler/network"
	"github.com/juan-lee/ctrlarm/pkg/services/azure"
	"github.com/juan-lee/ctrlarm/pkg/services/azure/config"
	"sigs.k8s.io/controller-runtime/pkg/runtime/log"
)

// Injectors from wire.go:

func NewReconciler() (*Reconciler, error) {
	logger := provideLogger()
	virtualNetworksClient, err := provideNetworkClient()
	if err != nil {
		return nil, err
	}
	reconciler := network.ProvideReconciler(logger, virtualNetworksClient)
	clusterReconciler := provideReconciler(logger, reconciler)
	return clusterReconciler, nil
}

// wire.go:

func provideLogger() logr.Logger {
	return log.Log.WithName("reconciler")
}

func provideNetworkClient() (*network2.VirtualNetworksClient, error) {
	err := config.ParseEnvironment()
	if err != nil {
		return nil, err
	}

	auth, err := azure.GetResourceManagementAuthorizer()
	if err != nil {
		return nil, err
	}

	client := network2.NewVirtualNetworksClient(config.SubscriptionID())
	client.Authorizer = auth

	return &client, nil
}
